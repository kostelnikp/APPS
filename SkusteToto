// **************************************************************************
//
//               Demo program for APPS labs
//
// Subject:      Computer Architectures and Parallel systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 02/2022
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         Main program for I2C bus
//
// **************************************************************************

#include <mbed.h>

#include "i2c-lib.h"
#include "si4735-lib.h"

//************************************************************************

// Direction of I2C communication
#define R	0b00000001
#define W	0b00000000

#pragma GCC diagnostic ignored "-Wunused-but-set-variable"

DigitalOut g_led_PTA1(PTA1, 0);
DigitalOut g_led_PTA2(PTA2, 0);

DigitalIn but1(PTC9);
DigitalIn but2(PTC10);
DigitalIn but3(PTC11);
DigitalIn but4(PTC12);

//--SABLONA--//
uint8_t i2c_out_in(uint8_t t_adr, uint8_t *t_out_data, uint32_t t_out_len,
		uint8_t *t_in_data, uint32_t t_in_len) {
	i2c_start();

	uint8_t l_ack = i2c_output(t_adr | W);

	if (l_ack == 0) {
		for (int i = 0; i < t_out_len; i++) {
			l_ack |= i2c_output(t_out_data[i]); // send all t_out_data
		}
	}

	if (l_ack != 0) // error?
			{
		i2c_stop();
		return l_ack;
	}

	if (t_in_data != nullptr) {
		i2c_start(); // repeated start

		l_ack |= i2c_output(t_adr | R);

		for (int i = 0; i < t_in_len; i++) {
			i2c_ack();
			t_in_data[i] = i2c_input(); // receive all t_data_in
		}

		i2c_nack();
	}

	i2c_stop();

	return l_ack;
}

class Expander {
public:

	void funkciaLED(int login) {
		int l_ack = 0;
		uint8_t led = 0b00000000;
		for (uint8_t i = 0; i < login; i++) {
			led = led << 1;
			led += 1;
			i2c_start();
			l_ack = i2c_output(0b01000000);
			l_ack = i2c_output(led);
			i2c_stop();
			wait_us(50000);
			if (i == 8) {
				i = 0;
			}
		}
	}

};

class Radio {
public:
	uint8_t set_volume(uint16_t sila) {
		uint8_t l_data_out[6] = { 0x12, 0x00, 0x40, 0x00, 0x00, sila };
		return i2c_out_in( SI4735_ADDRESS, l_data_out, 6, nullptr, 0);
	}

	uint8_t search_freqUP() {
		uint8_t l_data_out[2] = { 0x21, 0b00000100 };
		return i2c_out_in(SI4735_ADDRESS, l_data_out, 2, nullptr, 0);
	}
	uint8_t search_freqDOWN() {
		uint8_t l_data_out[2] = { 0x21, 0b00001100 };
		return i2c_out_in(SI4735_ADDRESS, l_data_out, 2, nullptr, 0);
	}

	uint8_t set_freq(uint16_t t_freq) {
		uint8_t l_data_out[5] = { 0x20, 0x00, t_freq >> 8, t_freq & 0xFF, 0 };
		return i2c_out_in( SI4735_ADDRESS, l_data_out, 5, nullptr, 0);
	}
	uint8_t get_tune_status(uint8_t *t_data_status, uint32_t t_data_len) {
		uint8_t l_data_out[2] = { 0x22, 0 };
		return i2c_out_in( SI4735_ADDRESS, l_data_out, 2, t_data_status,
				t_data_len);
	}
	int funkcia() {
		uint8_t l_ack = 0;
		uint8_t l_S1, l_S2, l_RSSI, l_SNR, l_MULT, l_CAP;
		int l_freq;
		i2c_start();
		l_ack |= i2c_output( SI4735_ADDRESS | W);
		l_ack |= i2c_output(0x22);			// FM_TUNE_STATUS
		l_ack |= i2c_output(0x00);			// ARG1
		// repeated start
		i2c_start();
		// change direction of communication
		l_ack |= i2c_output( SI4735_ADDRESS | R);
		// read data
		l_S1 = i2c_input();
		i2c_ack();
		l_S2 = i2c_input();
		i2c_ack();
		l_freq = (uint32_t) i2c_input() << 8;
		i2c_ack();
		l_freq |= i2c_input();
		i2c_ack();
		l_RSSI = i2c_input();
		i2c_ack();
		l_SNR = i2c_input();
		i2c_ack();
		l_MULT = i2c_input();
		i2c_ack();
		l_CAP = i2c_input();
		i2c_nack();
		i2c_stop();
		printf("RSSI:%d, SNR:%d\r\n\n", l_RSSI, l_SNR);
		return l_SNR;

	}

};

int main() {
	Expander led;
	int frekvencia = 9100;
	int login = 2;			//0378
	int volume = 20;
	int autoMan = 0;
	int temp = 0;
	Radio radio;
	int l_ack;
	i2c_init();

	if ((l_ack = si4735_init() != 0)) {
		printf("Initialization of SI4735 finish with error (%d)\r\n", l_ack);
		return 0;
	} else {
		printf("SI4735 initialized.\r\n");
	}

	l_ack = radio.set_freq(frekvencia);
	l_ack = radio.set_volume(volume);
	if (l_ack != 0) {
		printf("Communication error!\r\n");
	} else {
		printf("Current tuned frequency: %d.%dMHz\r\n", frekvencia / 100,
				frekvencia % 100);
		radio.funkcia();
	}

	while (1) {
		if (!but1) {
			autoMan++;
			temp = 0;
			if (autoMan >= 2) {
				autoMan = 0;
			}
			while (!but1)
				;
		}
		if (!but2) {
			volume = volume + 2;
			int snr = radio.funkcia();
			if (snr >= 8) {
				snr = 8;
			}
			led.funkciaLED(snr);
			if (volume >= 40) {
				volume = 10;
			}
			l_ack = radio.set_volume(volume);
			if (l_ack != 0) {
				printf("Communication error!\r\n");
			} else {
				printf("Current volume: .%d \r\n", volume);
			}
			while (!but2)
				;
		}

		if (autoMan == 0) {
			g_led_PTA1 = 1;
			g_led_PTA2 = 0;
			if (temp == 0) {
				printf("Manualne\r\n");
				temp++;
			}

			if (!but4) {
				frekvencia = frekvencia + 50;
				int snr = radio.funkcia();
				if (snr >= 8) {
					snr = 8;
				}
				led.funkciaLED(snr);
				if (frekvencia >= 10800) {
					frekvencia = 10800;
				}
				l_ack = radio.set_freq(frekvencia);
				if (l_ack != 0) {
					printf("Communication error!\r\n");
				} else {
					printf("Current tuned frequency: %d.%dMHz\r\n",
							frekvencia / 100, frekvencia % 100);
					//printf("Current radio station: %s", radio.getStationName());
					radio.funkcia();
				}
				while (!but4)
					;
			}
			if (!but3) {

				frekvencia = frekvencia - 50;
				int snr = radio.funkcia();
				if (snr >= 8) {
					snr = 8;
				}
				led.funkciaLED(snr);
				if (frekvencia <= 8300) {
					frekvencia = 8300;
				}
				l_ack = radio.set_freq(frekvencia);
				if (l_ack != 0) {
					printf("Communication error!\r\n");
				} else {
					printf("Current tuned frequency: %d.%dMHz\r\n",
							frekvencia / 100, frekvencia % 100);
					//printf("Current radio station: %s", radio.getStationName());

					radio.funkcia();
				}
				while (!but3)
					;
			}
		} else {
			g_led_PTA1 = 0;
			g_led_PTA2 = 1;
			if (temp == 0) {
				printf("Automaticky\r\n");
				temp++;
			}

			if (!but4) {
				l_ack = radio.search_freqUP();
				int snr = radio.funkcia();
				if (snr >= 8) {
					snr = 8;
				}
				led.funkciaLED(snr);
				if (l_ack != 0) {
					printf("Communication error!\r\n");
				} else {
					printf("Hladam frekvencie nahor\r\n");

				}
				while (!but4)
					;
			}
			if (!but3) {
				l_ack = radio.search_freqDOWN();
				int snr = radio.funkcia();
				if(snr >= 8)
				{
					snr = 8;
				}
				led.funkciaLED(snr);
				if (l_ack != 0) {
					printf("Communication error!\r\n");
				} else {
					printf("Hladam frekvencie nadol\r\n");

				}
				while (!but3)
					;
			}

		}

	};

}
